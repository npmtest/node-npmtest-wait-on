{"/home/travis/build/npmtest/node-npmtest-wait-on/test.js":"/* istanbul instrument in package npmtest_wait_on */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wait-on/lib.npmtest_wait_on.js":"/* istanbul instrument in package npmtest_wait_on */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_wait_on = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_wait_on = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-wait-on/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-wait-on && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_wait_on */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_wait_on\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_wait_on.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_wait_on.rollup.js'] =\n            local.assetsDict['/assets.npmtest_wait_on.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_wait_on.__dirname + '/lib.npmtest_wait_on.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wait-on/node_modules/wait-on/lib/wait-on.js":"'use strict';\n\nvar fs = require('fs');\nvar Joi = require('joi');\nvar net = require('net');\nvar Request = require('request');\nvar Rx = require('rx');\nrequire('core-js/modules/es6.string.starts-with');\n\nvar fstat = Rx.Observable.fromNodeCallback(fs.stat);\nvar head = Rx.Observable.fromNodeCallback(Request.head);\nvar get = Rx.Observable.fromNodeCallback(Request.get);\n\nvar WAIT_ON_SCHEMA = Joi.object().keys({\n  resources: Joi.array().items(Joi.string().required()),\n  delay: Joi.number().integer().min(0).default(0),\n  interval: Joi.number().integer().min(0).default(250),\n  log: Joi.boolean().default(false),\n  reverse: Joi.boolean().default(false),\n  timeout: Joi.number().integer().min(0).default(Infinity),\n  verbose: Joi.boolean().default(false),\n  window: Joi.number().integer().min(0).default(750),\n\n  // http options\n  ca: [Joi.string(), Joi.binary()],\n  cert: [Joi.string(), Joi.binary()],\n  key: [Joi.string(), Joi.binary()],\n  passphrase: Joi.string(),\n  auth: Joi.object().keys({\n    user: Joi.string(),\n    username: Joi.string(),\n    password: Joi.string(),\n    pass: Joi.string()\n  }),\n  httpSignature: Joi.object().keys({\n    keyId: Joi.string().required(),\n    key: Joi.string().required()\n  }),\n  strictSSL: Joi.boolean(),\n  followAllRedirects: Joi.boolean(),\n  followRedirect: Joi.boolean()\n});\n\n/**\n   Waits for resources to become available before calling callback\n\n   Polls file, http(s), tcp ports, sockets for availability.\n\n   Resource types are distinquished by their prefix with default being `file:`\n     - file:/path/to/file - waits for file to be available and size to stabilize\n     - http://foo.com:8000/bar verifies HTTP HEAD request returns 2XX\n     - https://my.bar.com/cat verifies HTTPS HEAD request returns 2XX\n     - http-get:  - HTTP GET returns 2XX response. ex: http://m.com:90/foo\n     - https-get: - HTTPS GET returns 2XX response. ex: https://my/bar\n     - tcp:my.server.com:3000 verifies a service is listening on port\n     - socket:/path/sock verifies a service is listening on (UDS) socket\n\n   @param opts object configuring waitOn\n   @param opts.resources array of string resources to wait for. prefix determines the type of resource with the default type of `file:`\n   @param opts.delay integer - optional initial delay in ms, default 0\n   @param opts.interval integer - optional poll resource interval in ms, default 250ms\n   @param opts.log boolean - optional flag to turn on logging to stdout\n   @param opts.timeout integer - optional timeout in ms, default Infinity. Aborts with error.\n   @param opts.verbose boolean - optional flag to turn on debug output\n   @param opts.window integer - optional stabilization time in ms, default 750ms. Waits this amount of time for file sizes to stabilize or other resource availability to remain unchanged. If less than interval then will be reset to interval\n   @param cb callback function with signature cb(err) - if err is provided then, resource checks did not succeed\n */\nfunction waitOn(opts, cb) {\n  var validResult = Joi.validate(opts, WAIT_ON_SCHEMA);\n  if (validResult.error) { return cb(validResult.error); }\n  opts = validResult.value; // use defaults\n\n  if (opts.window < opts.interval) {\n    opts.window = opts.interval; // it needs to be at least interval\n  }\n\n  var output = (opts.verbose) ?\n      console.log.bind() :\n      function () { };\n\n  var log = (opts.log) ?\n      console.log.bind() :\n      function () { };\n\n  var lastWaitForOutput; // the resources last known to be waiting for\n\n  var timeoutTimer = null;\n  if (opts.timeout !== Infinity) {\n    timeoutTimer = setTimeout(function () {\n      log('wait-on(%s) timed out waiting for: %s; exiting with error', process.pid, lastWaitForOutput);\n      cb(new Error('Timeout'))\n    }, opts.timeout);\n  }\n\n  function cleanup(err) {\n    if (timeoutTimer) {\n      clearTimeout(timeoutTimer);\n      timeoutTimer = null;\n    }\n    if (cb) {\n      cb(err);\n      cb = null; // only call once\n    }\n  }\n\n  /* Stability checking occurs by using an Rx window,\n     It waits until all of the vals from the resources are >=0,\n     then it waits for a window which has no changes\n     (duplicate outputs are filtered by distinctUntilChanged)\n  */\n\n  var lastValues = null;\n  var src = Rx.Observable.timer(opts.delay, opts.interval)\n      .concatMap(\n        function (counter) {\n          return Rx.Observable.from(opts.resources)\n            .concatMap(\n              function (resource, i) {\n                return create$(resource, opts);\n              },\n              function (resource, obj) {\n                return { resource: resource, val: obj.val, data: obj.data };\n              }\n            ).reduce(function (acc, x) {\n              acc[x.resource] = x.val;\n              return acc;\n            }, {});\n        }\n      )\n      .map(function (values) {\n        lastValues = values; // save lastValues for later ref\n        return values;\n      })\n      .distinctUntilChanged()\n      .windowWithTime(opts.window);\n\n  function lastValuesAllAvailable() {\n    if (!lastValues) { return false; }\n    var notReady = opts.resources\n        .filter(function (k) {\n          var lastValue = lastValues[k];\n          var result = (typeof lastValue !== 'number' || lastValue < 0);\n          return opts.reverse ? !result : result;\n        });\n\n    // only output when changes\n    var notReadyString = notReady.join(', ');\n    if (notReadyString && notReadyString !== lastWaitForOutput) {\n      log('wait-on(%s) waiting for: %s', process.pid, notReadyString);\n      lastWaitForOutput = notReadyString;\n    }\n\n    return !(notReady.length);\n  }\n\n  var subsc = src.subscribe(\n    function (child) {\n      var childSub = child.toArray().subscribe(\n        function (x) {\n          output('child next', x);\n          if (lastValuesAllAvailable() && !x.length) {\n            output('stabilized');\n            log('wait-on(%s) exiting successfully found all: %s', process.pid, opts.resources.join(', '));\n            childSub.dispose();\n            subsc.dispose();\n            cleanup();\n          }\n        },\n        function (err) {\n          output('child err', err);\n        },\n        function () {\n          output('child complete');\n        }\n      );\n    },\n    function (err) {\n      output('err: ', err);\n      log('wait-on(%s) exiting with error', process.pid, err);\n      cleanup(err);\n    },\n    function () {\n      output('complete');\n      cleanup();\n    }\n  );\n\n}\n\nfunction parseHttpOptions(options) {\n  if (options === undefined) return {}\n  var valid = [\n    // https://github.com/request/request/tree/c289759d10ebd76ff4138e81b39c81badde6e274#requestoptions-callback\n    'auth', 'httpSignature', 'followRedirect', 'followAllRedirects', 'strictSSL',\n    // https://github.com/request/request/tree/c289759d10ebd76ff4138e81b39c81badde6e274#tlsssl-protocol\n    'cert', 'key', 'passphrase', 'ca'\n  ];\n\n  var parsed = {};\n  valid.forEach(function (validOpt) {\n    if (options[validOpt] !== undefined) {\n      parsed[validOpt] = options[validOpt];\n    }\n  });\n  return parsed;\n}\n\n\nfunction create$(resource, options) {\n  if (resource.startsWith('http:')) {\n    return createHttp$(resource, options);\n  } else if (resource.startsWith('http-get:')) {\n    return createHttpGet$('http:' + resource.slice('http-get:'.length), options);\n  } else if (resource.startsWith('https:')) {\n    return createHttp$(resource, options);\n  } else if (resource.startsWith('https-get:')) {\n    return createHttpGet$('https:' + resource.slice('https-get:'.length), options);\n  } else if (resource.startsWith('tcp:')) {\n    return createTcp$(resource.slice('tcp:'.length));\n  } else if (resource.startsWith('socket:')) {\n    return createSocket$(resource.slice('socket:'.length));\n  } else if (resource.startsWith('file:')) {\n    return createFile$(resource.slice('file:'.length));\n  } else { // default to file\n    return createFile$(resource);\n  }\n}\n\nfunction createFile$(file) {\n  return Rx.Observable.catch(\n    fstat(file),\n    Rx.Observable.just({ size: -1 }) // fake stat when doesn't exist\n  )\n  .map(function (stat) {\n    return {\n      val: stat.size, // key comparator used\n      data: stat // additional data for debugging\n    };\n  });\n}\n\nfunction createHttp$(url, options) {\n  return Rx.Observable.catch(\n    head(url, parseHttpOptions(options)),\n    Rx.Observable.just([{statusCode: 999}])\n  )\n  .map(function (response) {\n    // Why is response in array here?\n    var statusCode = response[0].statusCode;\n    return {\n      // request will handle redirects before returning\n      // anything but 2XX is a failure\n      val: (statusCode >= 200 && statusCode <= 299) ?\n        statusCode :\n        -1 * statusCode,\n      data: response[0]\n    };\n  });\n}\n\nfunction createHttpGet$(url, options) {\n  return Rx.Observable.catch(\n    get(url, parseHttpOptions(options)),\n    Rx.Observable.just([{statusCode: 999}])\n  )\n  .map(function (response) {\n    // Why is response in array here?\n    var statusCode = response[0].statusCode;\n    return {\n      // request will handle redirects before returning\n      // anything but 2XX is a failure\n      val: (statusCode >= 200 && statusCode <= 299) ?\n        statusCode :\n        -1 * statusCode,\n      data: response[0]\n    };\n  });\n}\n\nfunction createTcp$(hostAndPort) {\n  var arrParts = hostAndPort.split(':');\n  var port = arrParts[arrParts.length - 1];\n  var host = arrParts[arrParts.length - 2] || 'localhost';\n  return Rx.Observable.create(function (observer) {\n    var conn = net.connect(port, host)\n        .on('error', function (err) {\n          observer.onNext({ val: -1, err: err });\n          observer.onCompleted();\n        })\n        .on('connect', function () {\n          observer.onNext({ val: 1 });\n          observer.onCompleted();\n          conn.end();\n        });\n  });\n}\n\nfunction createSocket$(socketPath) {\n  return Rx.Observable.create(function (observer) {\n    var conn = net.connect(socketPath)\n        .on('error', function (err) {\n          observer.onNext({ val: -1, err: err });\n          observer.onCompleted();\n        })\n        .on('connect', function () {\n          observer.onNext({ val: 1 });\n          observer.onCompleted();\n          conn.end();\n        });\n  });\n}\n\n// TODO create other observables like file, return val int >= 0 for available and data for debugging\n\nmodule.exports = waitOn;\n","/home/travis/build/npmtest/node-npmtest-wait-on/node_modules/wait-on/exampleConfig.js":"module.exports = {\n  // specify additional options here, especially http(s)\n  // see https://github.com/request/request#readme for specifics\n  ca: [ /* strings or binaries */],\n  cert: [ /* strings or binaries */],\n  key: [ /* strings or binaries */],\n  passphrase: 'yourpassphrase',\n  auth: {\n    user: 'yourusername',\n    pass: 'yourpassword'\n  },\n  httpSignature: {\n    keyId: 'keyId',\n    key: 'yourkey'\n  },\n  strictSSL: false,\n  followAllRedirects: false,\n  followRedirect: false\n};\n"}